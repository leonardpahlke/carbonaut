<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Carbonaut Docs</title><link>http://localhost:8081/</link><description>Recent content in Introduction on Carbonaut Docs</description><generator>Hugo</generator><language>en-us</language><atom:link href="http://localhost:8081/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://localhost:8081/docs/guides/how-to-run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/guides/how-to-run/</guid><description>Carbonaut: How To Run # The current Carbonaut version is a POC (Proof of Concept). The project is not tested for large environments. There are already several security and quality checks, but no security assessment has been done and there is a risk of vulnerabilities if it is deployed. The system is not hardened. Carbonaut can be run as binary or container. The latest releases can be found here.</description></item><item><title/><link>http://localhost:8081/docs/reference/server-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/reference/server-api/</guid><description>Carbonaut Server API # The Carbonaut Server is a lightweight HTTP server designed to provide metrics and static data management using a caching mechanism to optimize data delivery. This server is built using Go and utilizes a custom connector for data retrieval and a cache for data storage.
Configuration # Struct: Config # Port (int): The network port on which the server listens. Default is 8088. The port can be specified in the config.</description></item><item><title/><link>http://localhost:8081/docs/concepts/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/concepts/components/</guid><description>Carbonaut Components # Carbonaut&amp;rsquo;s internal components are explained in this document. At a high level, Carbonaut serves metrics and integration functionallity over a server component which calls endpoints in the connector to collect metrics. The connector is the central component which controls the main application life cycle, it inhales the logic registering plugins and managing state. Plugins implement providers which deliver different kinds of data which is required to get the holistic overview of cloud native environmental sustainability.</description></item><item><title/><link>http://localhost:8081/docs/guides/how-to-setup-dev-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/guides/how-to-setup-dev-environment/</guid><description>Carbonaut: How To Setup Your Dev Environment # This guide gives information how to start setup your development environment so you are ready to customize the current Carbonaut version.
There are two options which you can use. Either you use a vscode dev container which uses Docker in the background as virtualized dev environment. Or you use your regular machine for development. If you are on Windows you need to work with WSL (Linux Subsystem for Windows) and note that there may be some issues since Carbonaut was developed on macOS and not tested on other platforms.</description></item><item><title/><link>http://localhost:8081/docs/reference/schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/reference/schema/</guid><description>provider # import &amp;#34;carbonaut.dev/pkg/provider&amp;#34; Index # type Config type Data type EnvConfig type Res type ResConfig type Config # type Config struct { Resources ResConfig `json:&amp;#34;resources&amp;#34; yaml:&amp;#34;resources&amp;#34;` Environment *EnvConfig `json:&amp;#34;environment&amp;#34; yaml:&amp;#34;environment&amp;#34;` } type Data # type Data map[resource.AccountName]resource.AccountData type EnvConfig # type EnvConfig struct { DynamicEnvConfig *dynenv.Config `json:&amp;#34;dynamic_environment&amp;#34; yaml:&amp;#34;dynamic_environment&amp;#34;` } type Res # type Res struct { StaticResConfig *staticres.Config `json:&amp;#34;static_resource&amp;#34; yaml:&amp;#34;static_resource&amp;#34;` DynamicResConfig *dynres.Config `json:&amp;#34;dynamic_resource&amp;#34; yaml:&amp;#34;dynamic_resource&amp;#34;` } type ResConfig # type ResConfig map[resource.</description></item><item><title/><link>http://localhost:8081/docs/guides/how-to-develop-internals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/guides/how-to-develop-internals/</guid><description>Carbonaut: How To Develop Internals # This guide gives information how to start develop internals of Carbonaut. Carbonauts source code is developed in Go and located in the pkg/ directory of the project. After this guide you are able to make changes, verify if made changes work and how to push these changes and get towards merging it to the main Carbonaut project.
Setup:
Read the contributors guide here and fork the carbonaut repository.</description></item><item><title/><link>http://localhost:8081/docs/guides/how-to-develop-plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/guides/how-to-develop-plugins/</guid><description>Carbonaut: How To Develop Plugins # Setup:
Setup your dev environment. Follow this guide. Read up the concepts documentation about provider and plugins. Identify which provider interface you need to implement:
Choose the provider which is used to implement the data you like to integrate. dynres implements energy usage, cpu frequency etc. staticres implements cloud provider, hypervisors etc. that manage your infrastructure resources. dynenv implements energy grid APIs Setup your starting point (one of these) dynres: Copy the folder pkg/plugin/dynresplugins/mockenergy and rename it to your plugins name staticres: Copy the folder pkg/plugin/staticresplugins/mockcloudplugin and rename it to your plugins name dynenv: Copy the folder pkg/plugin/dynenvplugins/mockenergymix and rename it to your plugins name Implement the provider.</description></item><item><title/><link>http://localhost:8081/docs/reference/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/reference/contributing/</guid><description>Carbonaut Contributing # The Carbonaut project is a POC project and therefore no community structures are in place. If you find this project interesting enough to contribute, please open up an issue on the repository or directly a PR to discuss your idea. Any contributions are very welcome!
Development Workflow # Fork the repository and work on your fork. It&amp;rsquo;s recommended to create a feature branch on your fork and open pull requests from feature branches to Carbonaut&amp;rsquo;s main branch.</description></item><item><title>How to Test E2E</title><link>http://localhost:8081/docs/guides/how-to-test-e2e/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/guides/how-to-test-e2e/</guid><description> Carbonaut: How To Test End To End # Setup your dev environment. Follow this guide.</description></item><item><title/><link>http://localhost:8081/docs/reference/development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/reference/development/</guid><description>Carbonaut Project Development Guide # Install required tools # Install pre-commit which is used to run code checks Run make install which installs Go packages and sets up pre-commit. $ make help Available commands: all - Build project resources and verify code verify - Run verifications on the project (lint, vet, tests) install - Install project dependencies format - Format Go files upgrade - Upgrade project dependencies compile-grpc - Compile gRPC and protobuf definitions test-coverage - Generate and open test coverage report clean-coverage - Clean test coverage reports tf-init - Initialize OpenTofu configuration .</description></item><item><title/><link>http://localhost:8081/docs/concepts/advanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/concepts/advanced/</guid><description>Carbonaut Advanced Topics # This page covers several topics to the carbonaut project which offer greater depth to the project.
INFO: Internal State # Carbonaut maintains an internal state which includes data which does not change until a resource was destroyed. Information about how much CPU cores or which Chip Architecture is considered static resource information. Information about the geolocation which indicate where the resource is hosted is considered static environment information.</description></item><item><title/><link>http://localhost:8081/docs/plugins/dyn-environment/energy-map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/plugins/dyn-environment/energy-map/</guid><description>Carbonaut Energy Map Plugin # TBD
documentation not yet added Electricity Map: (you can get a free tier account here)</description></item><item><title/><link>http://localhost:8081/docs/plugins/dyn-resource/scaphandre/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/plugins/dyn-resource/scaphandre/</guid><description>Carbonaut Scpahandre Plugin # TBD
documentation not yet added Scaphandre</description></item><item><title/><link>http://localhost:8081/docs/plugins/static-resource/equinix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/plugins/static-resource/equinix/</guid><description>Carbonaut Equinix Plugin # TBD
documentation not yet added Equinix</description></item></channel></rss>