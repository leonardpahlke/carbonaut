<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carbonaut Docs</title><link>http://localhost:8081/docs/guides/</link><description>Recent content on Carbonaut Docs</description><generator>Hugo</generator><language>en-us</language><atom:link href="http://localhost:8081/docs/guides/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://localhost:8081/docs/guides/how-to-run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/guides/how-to-run/</guid><description>Carbonaut: How To Run # The current Carbonaut version is a POC (Proof of Concept). The project is not tested for large environments. There are already several security and quality checks, but no security assessment has been done and there is a risk of vulnerabilities if it is deployed. The system is not hardened. Carbonaut can be run as binary or container. The latest releases can be found here.</description></item><item><title/><link>http://localhost:8081/docs/guides/how-to-setup-dev-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/guides/how-to-setup-dev-environment/</guid><description>Carbonaut: How To Setup Your Dev Environment # This guide gives information how to start setup your development environment so you are ready to customize the current Carbonaut version.
There are two options which you can use. Either you use a vscode dev container which uses Docker in the background as virtualized dev environment. Or you use your regular machine for development. If you are on Windows you need to work with WSL (Linux Subsystem for Windows) and note that there may be some issues since Carbonaut was developed on macOS and not tested on other platforms.</description></item><item><title/><link>http://localhost:8081/docs/guides/how-to-develop-internals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/guides/how-to-develop-internals/</guid><description>Carbonaut: How To Develop Internals # This guide gives information how to start develop internals of Carbonaut. Carbonauts source code is developed in Go and located in the pkg/ directory of the project. After this guide you are able to make changes, verify if made changes work and how to push these changes and get towards merging it to the main Carbonaut project.
Setup:
Read the contributors guide here and fork the carbonaut repository.</description></item><item><title/><link>http://localhost:8081/docs/guides/how-to-develop-plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/guides/how-to-develop-plugins/</guid><description>Carbonaut: How To Develop Plugins # Setup:
Setup your dev environment. Follow this guide. Read up the concepts documentation about provider and plugins. Identify which provider interface you need to implement:
Choose the provider which is used to implement the data you like to integrate. dynres implements energy usage, cpu frequency etc. staticres implements cloud provider, hypervisors etc. that manage your infrastructure resources. dynenv implements energy grid APIs Setup your starting point (one of these) dynres: Copy the folder pkg/plugin/dynresplugins/mockenergy and rename it to your plugins name staticres: Copy the folder pkg/plugin/staticresplugins/mockcloudplugin and rename it to your plugins name dynenv: Copy the folder pkg/plugin/dynenvplugins/mockenergymix and rename it to your plugins name Implement the provider.</description></item><item><title>How to Test E2E</title><link>http://localhost:8081/docs/guides/how-to-test-e2e/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/guides/how-to-test-e2e/</guid><description> Carbonaut: How To Test End To End # Setup your dev environment. Follow this guide.</description></item></channel></rss>