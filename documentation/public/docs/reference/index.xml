<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carbonaut Docs</title><link>http://localhost:8081/docs/reference/</link><description>Recent content on Carbonaut Docs</description><generator>Hugo</generator><language>en-us</language><atom:link href="http://localhost:8081/docs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://localhost:8081/docs/reference/server-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/reference/server-api/</guid><description>Carbonaut Server API # The Carbonaut Server is a lightweight HTTP server designed to provide metrics and static data management using a caching mechanism to optimize data delivery. This server is built using Go and utilizes a custom connector for data retrieval and a cache for data storage.
Configuration # Struct: Config # Port (int): The network port on which the server listens. Default is 8088. The port can be specified in the config.</description></item><item><title/><link>http://localhost:8081/docs/reference/schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/reference/schema/</guid><description>provider # import &amp;#34;carbonaut.dev/pkg/provider&amp;#34; Index # type Config type Data type EnvConfig type Res type ResConfig type Config # type Config struct { Resources ResConfig `json:&amp;#34;resources&amp;#34; yaml:&amp;#34;resources&amp;#34;` Environment *EnvConfig `json:&amp;#34;environment&amp;#34; yaml:&amp;#34;environment&amp;#34;` } type Data # type Data map[resource.AccountName]resource.AccountData type EnvConfig # type EnvConfig struct { DynamicEnvConfig *dynenv.Config `json:&amp;#34;dynamic_environment&amp;#34; yaml:&amp;#34;dynamic_environment&amp;#34;` } type Res # type Res struct { StaticResConfig *staticres.Config `json:&amp;#34;static_resource&amp;#34; yaml:&amp;#34;static_resource&amp;#34;` DynamicResConfig *dynres.Config `json:&amp;#34;dynamic_resource&amp;#34; yaml:&amp;#34;dynamic_resource&amp;#34;` } type ResConfig # type ResConfig map[resource.</description></item><item><title/><link>http://localhost:8081/docs/reference/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/reference/contributing/</guid><description>Carbonaut Contributing # The Carbonaut project is a POC project and therefore no community structures are in place. If you find this project interesting enough to contribute, please open up an issue on the repository or directly a PR to discuss your idea. Any contributions are very welcome!
Development Workflow # Fork the repository and work on your fork. It&amp;rsquo;s recommended to create a feature branch on your fork and open pull requests from feature branches to Carbonaut&amp;rsquo;s main branch.</description></item><item><title/><link>http://localhost:8081/docs/reference/development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:8081/docs/reference/development/</guid><description>Carbonaut Project Development Guide # Install required tools # Install pre-commit which is used to run code checks Run make install which installs Go packages and sets up pre-commit. $ make help Available commands: all - Build project resources and verify code verify - Run verifications on the project (lint, vet, tests) install - Install project dependencies format - Format Go files upgrade - Upgrade project dependencies compile-grpc - Compile gRPC and protobuf definitions test-coverage - Generate and open test coverage report clean-coverage - Clean test coverage reports tf-init - Initialize OpenTofu configuration .</description></item></channel></rss>