<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Carbonaut Docs</title><link>http://localhost:1313/docs/reference/</link><description>Recent content on Carbonaut Docs</description><generator>Hugo</generator><language>en-us</language><atom:link href="http://localhost:1313/docs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>http://localhost:1313/docs/reference/server-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/reference/server-api/</guid><description> Carbonaut Server API # &amp;hellip;
TBD
documentation not yet added</description></item><item><title/><link>http://localhost:1313/docs/reference/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/reference/contributing/</guid><description>Carbonaut Contributing # The Carbonaut project is a POC project and therefore no community structures are in place. If you find this project interesting enough to contribute, please open up an issue on the repository or directly a PR to discuss your idea. Any contributions are very welcome!
Development Workflow # Fork the repository and work on your fork. It&amp;rsquo;s recommended to create a feature branch on your fork and open pull requests from feature branches to Carbonaut&amp;rsquo;s main branch.</description></item><item><title/><link>http://localhost:1313/docs/reference/schema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/docs/reference/schema/</guid><description>provider # import &amp;#34;carbonaut.dev/pkg/provider&amp;#34; Index # type Config type Data type EnvConfig type Res type ResConfig type Topology type Config # type Config struct { Resources ResConfig `json:&amp;#34;resources&amp;#34; yaml:&amp;#34;resources&amp;#34;` Environment *EnvConfig `json:&amp;#34;environment&amp;#34; yaml:&amp;#34;environment&amp;#34;` } type Data # type Data map[account.Name]account.Data type EnvConfig # type EnvConfig struct { DynamicEnvConfig *dynenv.Config `json:&amp;#34;dynamic_environment&amp;#34; yaml:&amp;#34;dynamic_environment&amp;#34;` } type Res # type Res struct { StaticResConfig *staticres.Config `json:&amp;#34;static_resource&amp;#34; yaml:&amp;#34;static_resource&amp;#34;` DynamicResConfig *dynres.Config `json:&amp;#34;dynamic_resource&amp;#34; yaml:&amp;#34;dynamic_resource&amp;#34;` } type ResConfig # type ResConfig map[account.</description></item></channel></rss>